namespace SampleProject.Domain.Entities;

public partial record Cart
{
    public Identifier Id { get; init; }
    public ImmutableDictionary<string, CartItem> Items { get; init; }
    public Amount TotalAmount { get; init; }

    public Cart()
    {
        Id = new Identifier();
        Items = ImmutableDictionary<string, CartItem>.Empty;
        TotalAmount = new Amount();
    }

    public static Entity<Cart> Create(string idValue, ImmutableDictionary<string, Entity<CartItem>> items, int totalAmountValue, string totalAmountCurrency)
    {
        return Entity<Cart>.Valid(new Cart())
            .SetId(idValue)
            .SetItems(items)
            .SetTotalAmount(totalAmountValue, totalAmountCurrency);
    }
}

// Can be autogenerated with Grenat.Functional.DDD.Generators: 
// https://github.com/BastienFoucher/Grenat.Functional.DDD.Generators
public static partial class CartSetters
{
    public static Entity<Cart> SetId(this Entity<Cart> cart, String value)
    {
        return cart.SetId(Identifier.Create(value));
    }

    public static Entity<Cart> SetId(this Entity<Cart> cart, ValueObject<Identifier> id)
    {
        return cart.SetValueObject(id, static (cart, id) => cart with { Id = id });
    }

    public static Entity<Cart> SetItems(this Entity<Cart> cart, ImmutableDictionary<string, Entity<CartItem>> items)
    {
        return cart.SetEntityDictionary(items, static (cart, items) => cart with { Items = items });
    }

    public static Entity<Cart> SetTotalAmount(this Entity<Cart> cart, Int32 value, String currency)
    {
        return cart.SetTotalAmount(Amount.Create(value, currency));
    }

    public static Entity<Cart> SetTotalAmount(this Entity<Cart> cart, ValueObject<Amount> totalAmount)
    {
        return cart.SetValueObject(totalAmount, static (cart, totalAmount) => cart with { TotalAmount = totalAmount });
    }

}

// Can be autogenerated with Grenat.Functional.DDD.Generators : 
// https://github.com/BastienFoucher/Grenat.Functional.DDD.Generators
public partial class CartBuilder
{
    private string _id;
    public CartBuilder WithId(string id)
    {
        _id = id;
        return this;
    }

    private ImmutableDictionary<string, Entity<CartItem>> _items;
    public CartBuilder WithItems(ImmutableDictionary<string, Entity<CartItem>> items)
    {
        _items = items;
        return this;
    }

    private int _totalAmount;
    private string _totalAmountCurrency;

    public CartBuilder WithTotalAmount(int totalAmount, string totalAmountCurrency)
    {
        _totalAmount = totalAmount;
        _totalAmountCurrency = totalAmountCurrency;
        return this;
    }

    public CartBuilder()
    {
        _id = string.Empty;
        _totalAmount = 0;
        _totalAmountCurrency = string.Empty;
        _items = ImmutableDictionary<string, Entity<CartItem>>.Empty;
    }

    public Entity<Cart> Build() => Cart.Create(_id, _items, _totalAmount, _totalAmountCurrency);

}
